// -*- tab-width:2 ; indent-tabs-mode:nil -*-
//:: cases KernelFusionMultiple
//:: tools silicon
//:: verdict Pass

class KernelFusionOrig5 {

  context_everywhere a != null;
  context_everywhere b != null;
  context_everywhere c != null;
  context_everywhere a.length == b.length;
  context_everywhere a.length == c.length;
  //context_everywhere a.length == 2048;
  //context_everywhere b.length == 2048;
  //context_everywhere c.length == 2048;
  requires (\forall* int i;i >= 0 && i < a.length;Perm( a [ i ] , 1 \ 1 ));
  requires (\forall* int i;i >= 0 && i < a.length;Perm( b [ i ] , 1 \ 1 ));
  requires (\forall* int i;i >= 0 && i < a.length;Perm( c [ i ] , 1 \ 1 ));
  requires (\forall int i;i >= 0 && i < a.length;a [ i ] == 1);
  requires (\forall int i;i >= 0 && i < a.length;b [ i ] == 2);
  ensures (\forall* int i;i >= 0 && i < a.length;Perm( a [ i ] , 1 \ 1 ));
  ensures (\forall* int i;i >= 0 && i < a.length;Perm( b [ i ] , 1 \ 1 ));
  ensures (\forall* int i;i >= 0 && i < a.length;Perm( c [ i ] , 1 \ 1 ));
  ensures (\forall* int i;i >= 0 && i < a.length;a [ i ] == 2 * \old( a [ i ] ));
  ensures (\forall* int i;i >= 0 && i < a.length;a [ i ] == 2);
  ensures (\forall* int i;i >= 0 && i < a.length;c [ i ] == - 1);
  void Kernel_Fusion_Orig(int[] a,int[] b,int[] c){
    gpuopt fuse 3 1;
    par kernel1(int tid = 0 .. a.length)
      requires Perm( a [ tid ] , 1 \ 2 );
      requires Perm( b [ tid ] , 1 \ 1 );
      requires a [ tid ] == 1;
      requires b [ tid ] == 2;
      ensures Perm( a [ tid ] , 1 \ 2 );
      ensures Perm( b [ tid ] , 1 \ 1 );
      ensures a [ tid ] == b [ tid ];
      {
        b [ tid ] = a [ tid ];
      }
    par kernel2(int tid = 0 .. a.length)
      requires Perm( c [ tid ] , 1 \ 1 );
      ensures Perm( c [ tid ] , 1 \ 1 );
      ensures c [ tid ] == - 1;
      {
        c [ tid ] = - 1;
      }
    par kernel3(int tid = 0 .. a.length)
      requires Perm( a [ tid ] , 1 \ 1 );
      requires Perm( b [ tid ] , 1 \ 2 );
      requires a [ tid ] == b [ tid ];
      requires b [ tid ] == 1;
      ensures Perm( a [ tid ] , 1 \ 1 );
      ensures Perm( b [ tid ] , 1 \ 2 );
      ensures a [ tid ] == 2 * b [ tid ];
      ensures a [ tid ] == 2;
      {
        a [ tid ] = 2 * b [ tid ];
      }
  }

}

