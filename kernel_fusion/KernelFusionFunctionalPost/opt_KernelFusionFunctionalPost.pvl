class KernelFusionOrig6 {
  
  context_everywhere a != null;
  context_everywhere b != null;
  context_everywhere a.length == 2048;
  context_everywhere b.length == 2048;
  context_everywhere a.length == b.length;
  requires (\forall* int i;i >= 0 && i < a.length;Perm( a [ i ] , 1 \ 1 ));
  requires (\forall* int i;i >= 0 && i < a.length;Perm( b [ i ] , 1 \ 2 ));
  requires (\forall int i;i >= 0 && i < a.length;b [ i ] == 0);
  requires (\forall int i;i >= 0 && i < a.length;a [ i ] == 1);
  ensures (\forall* int i;i >= 0 && i < a.length;Perm( a [ i ] , 1 \ 1 ));
  ensures (\forall* int i;i >= 0 && i < a.length;Perm( b [ i ] , 1 \ 2 ));
  ensures (\forall int i;i >= 0 && i < a.length;b [ i ] == 0);
  void Kernel_Fusion_Orig(int[] a,int[] b){
    par vct_fused_kernels(int vct_fused_tid = 0 .. a.length)
      requires (2 * vct_fused_tid < 2048 ==> Perm( a [ (2 * vct_fused_tid) ] , 1 \ 1 ));
      requires (2 * vct_fused_tid + 1 < 2048 ==> Perm( a [ (2 * vct_fused_tid + 1) ] , 1 \ 1 ));
      requires (2 * vct_fused_tid < 2048 ==> Perm( b [ (2 * vct_fused_tid) ] , 1 \ 2 ));
      requires (2 * vct_fused_tid + 1 < 2048 ==> Perm( b [ (2 * vct_fused_tid + 1) ] , 1 \ 2 ));
      requires (2 * vct_fused_tid < a.length ==> a [ (2 * vct_fused_tid) ] == 1);
      requires (2 * vct_fused_tid < a.length ==> b [ (2 * vct_fused_tid) ] == 0);
      requires (2 * vct_fused_tid + 1 < a.length ==> a [ (2 * vct_fused_tid + 1) ] == 1);
      requires (2 * vct_fused_tid + 1 < a.length ==> b [ (2 * vct_fused_tid + 1) ] == 0);
      ensures (2 * vct_fused_tid < a.length ==> Perm( a [ (2 * vct_fused_tid) ] , 1 \ 1 ));
      ensures (2 * vct_fused_tid + 1 < a.length ==> Perm( a [ (2 * vct_fused_tid + 1) ] , 1 \ 1 ));
      ensures (2 * vct_fused_tid < a.length ==> Perm( b [ (2 * vct_fused_tid) ] , 1 \ 2 ));
      ensures (2 * vct_fused_tid + 1 < a.length ==> Perm( b [ (2 * vct_fused_tid + 1) ] , 1 \ 2 ));
      ensures (2 * vct_fused_tid < a.length ==> b [ (2 * vct_fused_tid) ] == a [ (2 * vct_fused_tid) ]);
      ensures (2 * vct_fused_tid < a.length ==> a [ (2 * vct_fused_tid) ] == 0);
      ensures (2 * vct_fused_tid + 1 < a.length ==> a [ (2 * vct_fused_tid + 1) ] == b [ (2 * vct_fused_tid + 1) ]);
      ensures (2 * vct_fused_tid + 1 < a.length ==> a [ (2 * vct_fused_tid + 1) ] == 0);
      {
        if (2 * vct_fused_tid < a.length) {
          a [ (2 * vct_fused_tid) ] = b [ (2 * vct_fused_tid) ];
        }
        assert 2 * vct_fused_tid < a.length ==> Perm( a [ (2 * vct_fused_tid) ] , 1 \ 1 );
        assert 2 * vct_fused_tid < a.length ==> Perm( b [ (2 * vct_fused_tid) ] , 1 \ 2 );
        assert 2 * vct_fused_tid < a.length ==> b [ (2 * vct_fused_tid) ] == a [ (2 * vct_fused_tid) ];
        assert 2 * vct_fused_tid < a.length ==> a [ (2 * vct_fused_tid) ] == 0;
        if (2 * vct_fused_tid + 1 < a.length) {
          a [ (2 * vct_fused_tid + 1) ] = b [ (2 * vct_fused_tid + 1) ];
        }
      }
    assert (\forall int i;0 <= i && i < a.length && 2 * i < a.length;a [ (2 * i) ] == 0);
    assert (\forall int i;0 <= i && i < a.length && 2 * i + 1 < a.length;a [ (2 * i + 1) ] == 0);
  }
  
}

