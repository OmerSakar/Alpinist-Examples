// -*- tab-width:2 ; indent-tabs-mode:nil -*-
//:: cases opt_kernel-example-v2
//:: tools silicon
//:: verdict Pass
class Ref {
  
  context_everywhere a != null;
  context_everywhere b != null;
  context_everywhere c != null;
  context_everywhere (a.length == tcount && b.length == tcount && c.length == tcount);
  context_everywhere tcount >= 0;
  requires (\forall* int i;0 <= i && i < tcount;Perm( c [ i ] , 1 \ 4 ) ** c [ i ] > 0);
  requires (\forall* int i;0 <= i && i < tcount;Perm( a [ i ] , write ));
  requires (\forall* int i;0 <= i && i < tcount;Perm( b [ i ] , write ));
  ensures (\forall* int i;0 <= i && i < tcount;Perm( c [ i ] , 1 \ 4 ) ** c [ i ] > 0);
  ensures (\forall* int i;0 <= i && i < tcount;Perm( a [ i ] , 1 \ 4 ) ** a [ i ] > 0);
  ensures (\forall* int i;0 <= i && i < tcount;Perm( b [ i ] , 1 \ 4 ) ** b [ i ] > 0);
  void main(int tcount,int[] a,int[] b,int[] c){
    par
      fwd(int tid = 0 .. tcount)
      requires Perm( c [ tid ] , 1 \ 4 );
      requires c [ tid ] > 0;
      requires Perm( a [ tid ] , write );
      requires Perm( b [ tid ] , write );
      ensures Perm( c [ tid ] , 1 \ 4 );
      ensures c [ tid ] > 0;
      ensures Perm( a [ tid ] , 1 \ 4 );
      ensures a [ tid ] > 0;
      ensures Perm( b [ tid ] , 1 \ 4 );
      ensures b [ tid ] > 0;
      {
        int b_reg_0 = b [ tid ];
        b_reg_0 = c [ tid ];
        b [ tid ] = b_reg_0;
        barrier(fwd) { 
          requires 0 <= tid && tid < tcount;
          requires Perm( a [ tid ] , write );
          requires Perm( c [ tid ] , 1 \ 4 );
          requires Perm( b [ tid ] , write );
          requires b [ tid ] > 0;
          requires c [ tid ] > 0;
          ensures 0 <= tid && tid < tcount;
          ensures Perm( a [ tid ] , write );
          ensures Perm( c [ tid ] , 1 \ 4 );
          ensures Perm( b [ tid ] , 1 \ 4 );
          ensures (tid > 0 ==> Perm( b [ (tid - 1) ] , 1 \ 4 ));
          ensures b [ tid ] > 0;
          ensures c [ tid ] > 0;
          ensures (tid > 0 ==> b [ (tid - 1) ] > 0);
        }
        int a_reg_1 = a [ tid ];
        int b_reg_0 = b [ tid ];
        if (tid > 0) {
          a_reg_1 = b [ (tid - 1) ] + b_reg_0;
        } else {
          a_reg_1 = b_reg_0;
        }
        a [ tid ] = a_reg_1;
      }
  }
  
}

