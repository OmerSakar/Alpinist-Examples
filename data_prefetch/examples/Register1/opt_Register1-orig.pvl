// -*- tab-width:2 ; indent-tabs-mode:nil -*-
//:: cases opt_RegisterOrig1
//:: tools silicon
//:: verdict Pass

class RegisterOrig1 {
  
    context_everywhere a != null;
    context_everywhere b != null;
    context_everywhere a.length == b.length;
    requires (\forall* int i;i >= 0 && i < a.length;Perm( a [ i ] , 1 ));
    requires (\forall* int i;i >= 0 && i < a.length;Perm( b [ i ] , 1 \ 2 ));
    ensures (\forall* int i;i >= 0 && i < a.length;Perm( a [ i ] , 1 ));
    ensures (\forall* int i;i >= 0 && i < a.length;Perm( b [ i ] , 1 \ 2 ));
    ensures (\forall int i;i >= 0 && i < a.length;a [ i ] == 3 * b [ i ] - 4);
    void Register_Orig(int[] a,int[] b){
        par kernel1(int tid = 0 .. a.length)
            requires Perm( a [ tid ] , 1 );
            requires Perm( b [ tid ] , 1 \ 2 );
            ensures Perm( a [ tid ] , 1 );
            ensures Perm( b [ tid ] , 1 \ 2 );
            ensures a [ tid ] == 3 * b [ tid ] - 4;
        {
            int a_reg_0 = a [ tid ];
            int b_reg_1 = b [ tid ];
            a_reg_0 = 2 * b_reg_1;
            a_reg_0 = a_reg_0 + 1;
            a_reg_0 = a_reg_0 + b_reg_1;
            a_reg_0 = a_reg_0 - 5;
            a [ tid ] = a_reg_0;
        }
    }
}

