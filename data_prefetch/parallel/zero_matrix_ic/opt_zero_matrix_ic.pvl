// -*- tab-width:2 ; indent-tabs-mode:nil -*-
//:: cases opt_ZeroMultiple
//:: tools silicon
//:: verdict Pass

class ZeroMatrixIC {
  
    context_everywhere matrix != null;
    context_everywhere M > 0;
    context_everywhere N > 0;
    context_everywhere matrix.length == M * N;
    requires (\forall* int i1;0 <= i1 && i1 < M;(\forall* int j1;0 <= j1 && j1 < N;Perm( (matrix [ i1 ]) [ j1 ] , write )));
    ensures (\forall* int i1;0 <= i1 && i1 < M;(\forall* int j1;0 <= j1 && j1 < N;Perm( (matrix [ i1 ]) [ j1 ] , write )));
    ensures (\forall int i3;0 <= i3 && i3 < M;(\forall int j3;0 <= j3 && j3 < N;(matrix [ i3 ]) [ j3 ] == 0));
    void matrix(int M,int N,int[][] matrix){
        par twodim(int i = 0 .. M,int j = 0 .. N)
            requires Perm( (matrix [ i ]) [ j ] , write );
            ensures Perm( (matrix [ i ]) [ j ] , write );
            ensures (matrix [ i ]) [ j ] == 0;
        {
            int matrix_i_reg_0 = (matrix [ i ]) [ j ];
            matrix_i_reg_0 = 0;
            (matrix [ i ]) [ j ] = matrix_i_reg_0;
        }
    }

}

