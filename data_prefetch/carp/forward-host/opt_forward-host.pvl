// -*- tab-width:2 ; indent-tabs-mode:nil -*-
//:: cases opt_ForwardHost
//:: tools silicon
//:: verdict Pass

class Ref {
  
  context_everywhere N > 0;
  context_everywhere a != null;
  context_everywhere b != null;
  context_everywhere c != null;
  requires (\forall* int i;0 <= i && i < N;Perm( a [ i ] , write ));
  requires (\forall* int i;0 <= i && i < N;Perm( b [ i ] , 1 \ 2 ));
  requires (\forall* int i;0 <= i && i < N;Perm( c [ i ] , write ));
  requires (\forall int i;0 <= i && i < N;b [ i ] == i);
  ensures (\forall* int i;0 <= i && i < N;Perm( a [ i ] , write ));
  ensures (\forall* int i;0 <= i && i < N;Perm( b [ i ] , 1 \ 2 ));
  ensures (\forall* int i;0 <= i && i < N;Perm( c [ i ] , write ));
  ensures (\forall int i;0 <= i && i < N;a [ i ] == i + 1);
  ensures (\forall int i;0 <= i && i < N;b [ i ] == i);
  ensures (\forall int i;0 < i && i < N;c [ i ] == i + 2);
  void forward(int N,int[] a,int[] b,int[] c){
    par
      fwd(int i = 0 .. N)
      requires Perm( a [ i ] , write );
      requires Perm( b [ i ] , 1 \ 2 );
      requires Perm( c [ i ] , write );
      requires b [ i ] == i;
      ensures Perm( a [ i ] , 1 \ 2 );
      ensures Perm( b [ i ] , 1 \ 2 );
      ensures Perm( c [ i ] , write );
      ensures a [ i ] == i + 1;
      ensures b [ i ] == i;
      ensures (i > 0 ==> c [ i ] == i + 2);
      ensures (i > 0 ==> Perm( a [ (i - 1) ] , 1 \ 2 ));
      ensures (i == N - 1 ==> Perm( a [ i ] , 1 \ 2 ));
      {
        a [ i ] = b [ i ] + 1;
        barrier(fwd) { 
          requires (i < N - 1 ==> Perm( a [ i ] , 1 \ 2 ));
          requires (i < N - 1 ==> a [ i ] == i + 1);
          ensures (i > 0 ==> Perm( a [ (i - 1) ] , 1 \ 2 ));
          ensures (i > 0 ==> a [ (i - 1) ] == i);
        }
        int a_reg_0;
        if (true && i > 0) a_reg_0 = a [ (i - 1) ];
        if (i > 0) {
          c [ i ] = a_reg_0 + 2;
        }
      }
  }
  
  context_everywhere N > 10;
  context_everywhere a != null;
  context_everywhere b != null;
  context_everywhere c != null;
  requires (\forall* int i;0 <= i && i < N;Perm( a [ i ] , write ));
  requires (\forall* int i;0 <= i && i < N;Perm( b [ i ] , write ));
  requires (\forall* int i;0 <= i && i < N;Perm( c [ i ] , write ));
  void host(int N,int[] a,int[] b,int[] c){
    par
      (int i = 0 .. N)
      requires Perm( b [ i ] , write );
      ensures Perm( b [ i ] , write );
      ensures b [ i ] == i;
      {
        b [ i ] = i;
      }
    forward(N,a,b,c);
    assert a [ 5 ] == 6;
  }
  
}

