class ArraySum {
  int sum;
  
  static pure int vct_tile_newIdx(int a,int b,int c) = a + b * c;
  
  requires b > 0;
  static pure int vct_tile_ceiling(int a,int b) = a % b == 0 ? a / b : a / b + 1;
  
  context_everywhere A != null;
  context_everywhere A.length > 4096;
  requires (\forall* int i_0;0 <= i_0 && i_0 < 4096;(\forall* int i_1;i_1 >= 0 && i_1 < vct_tile_ceiling(A.length,4096) && vct_tile_newIdx(i_0,i_1,4096) < A.length;Perm( A [ vct_tile_newIdx(i_0,i_1,4096) ] , 1 \ 2 )));
  requires Perm( this.sum , write );
  ensures (\forall* int i_0;0 <= i_0 && i_0 < 4096;(\forall* int i_1;i_1 >= 0 && i_1 < vct_tile_ceiling(A.length,4096) && vct_tile_newIdx(i_0,i_1,4096) < A.length;Perm( A [ vct_tile_newIdx(i_0,i_1,4096) ] , 1 \ 2 )));
  ensures Perm( this.sum , write );
  void sum(int[] A){
    invariant inv (true ** Perm( this.sum , write )){
      par (int tid = 0 .. 4096)
        requires (\forall* int vct_i;vct_i >= 0 && (vct_i < vct_tile_ceiling(A.length,4096) && vct_tile_newIdx(tid,vct_i,4096) < A.length);Perm( A [ vct_tile_newIdx(tid,vct_i,4096) ] , 1 \ 2 ));
        ensures (\forall* int vct_i;vct_i >= 0 && (vct_i < vct_tile_ceiling(A.length,4096) && vct_tile_newIdx(tid,vct_i,4096) < A.length);Perm( A [ vct_tile_newIdx(tid,vct_i,4096) ] , 1 \ 2 ));
        {
          loop_invariant vct_tile_counter >= 0;
          loop_invariant vct_tile_counter <= vct_tile_ceiling(A.length,4096);
          loop_invariant (\forall* int vct_i;vct_i >= 0 && (vct_i < vct_tile_ceiling(A.length,4096) && vct_tile_newIdx(tid,vct_i,4096) < A.length);Perm( A [ vct_tile_newIdx(tid,vct_i,4096) ] , 1 \ 2 ));
          for(int vct_tile_counter = 0;tid + vct_tile_counter * 4096 < A.length;vct_tile_counter = vct_tile_counter + 1){
            atomic (inv){
              {
                sum = sum + A [ vct_tile_newIdx(tid,vct_tile_counter,4096) ];
              }
            }
          }
        }
    }
  }
  
}

